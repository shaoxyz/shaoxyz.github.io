<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SQL联表查询辅助表去重</title>
    <url>/2020/07/16/SQL%E8%81%94%E8%A1%A8%E6%9F%A5%E8%AF%A2%E8%BE%85%E5%8A%A9%E8%A1%A8%E5%8E%BB%E9%87%8D/</url>
    <content><![CDATA[<p>老东家运营妹子要做数据分析提的一个需求</p>
<p>统计所有用户在注册当天是否完成过消费</p>
<p>涉及用户表和订单表的联表查询, 主要字段为用户id，注册时间，第一笔消费时间</p>
<p>我们的MySQL版本是5.7.18</p>
<p>先说遇到的问题</p>
<p>首先，用 <code>GROUP BY</code> 会触发 <a href="https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_only_full_group_by" target="_blank" rel="noopener"><code>ONLY_FULL_GROUP_BY</code></a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> u.id, u.created_at, o.created_at </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span> u </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> orders o <span class="keyword">ON</span> o.buyer_id = user.id <span class="keyword">AND</span> o.state = <span class="number">1</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> o.buyer_id</span><br></pre></td></tr></table></figure>
<p>简单来说，MySQL5.7.5之后，SQL需要检测函数依赖关系，<code>SELECT</code> &amp; <code>ORDER BY</code> &amp; <code>HAVING</code> 不能引用非聚合列</p>
<p>之所以要这么做是为了避免当出现不正确和不可预测的查询结果时MySQL没有任何报错和警告，这里有<a href="https://mysqlserverteam.com/mysql-5-7-only_full_group_by-improved-recognizing-functional-dependencies-enabled-by-default/" target="_blank" rel="noopener">具体例子与说明</a></p>
<p>再者，用<code>MIN</code> ||  <code>MAX</code> || <code>ANY_VALUE</code>将非聚合列包起来也是可行的，但实测在数据量较大的情况下很慢。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(u.id), <span class="keyword">MIN</span>(u.created_at), <span class="keyword">MIN</span>(o.created_at) </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span> u <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> orders o <span class="keyword">ON</span> o.buyer_id = u.id <span class="keyword">AND</span> o.state = <span class="number">1</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> o.buyer_id</span><br></pre></td></tr></table></figure>
<p>推测是这么做依然没有真正意义上的去重，而是类似与把原来的查询作为子查询又过滤了一遍</p>
<p>想要的效果是：直接限制辅助表只取一行</p>
<p>在<a href="https://stackoverflow.com/questions/11885394/mysql-join-with-limit-1/11885521#11885521" target="_blank" rel="noopener">stackoverflow</a>上找到了最佳答案</p>
<p>最后修改SQL如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    user.id, </span><br><span class="line">    <span class="keyword">CASE</span> </span><br><span class="line">        <span class="keyword">WHEN</span> <span class="built_in">DATE</span>(o.created_at) = <span class="built_in">DATE</span>(u.created_at) <span class="keyword">THEN</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">'是否在注册当天购买'</span>, </span><br><span class="line">    <span class="built_in">DATE</span>(u.created_at) <span class="keyword">AS</span> <span class="string">'注册时间'</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span> u</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> orders o <span class="keyword">ON</span> o.id = ( <span class="comment"># 注意这里必须是主键</span></span><br><span class="line">    <span class="keyword">SELECT</span> o2.id</span><br><span class="line">    <span class="keyword">FROM</span> orders o2</span><br><span class="line">    <span class="keyword">WHERE</span> o2.buyer_id = u.id</span><br><span class="line">        <span class="keyword">AND</span> o2.state = <span class="number">1</span></span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> o2.id</span><br><span class="line">    <span class="keyword">LIMIT</span> <span class="number">1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>用户表30w<br>订单表70w<br>时间大概在10～20ms, 可以接受<br><img src="/images/left-join-limit-1.png" width="50%" ></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>hello world</title>
    <url>/2020/05/21/hello-world/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>将包含父子关系值的列表转为树状嵌套字典</title>
    <url>/2020/07/20/%E5%B0%86%E5%8C%85%E5%90%AB%E7%88%B6%E5%AD%90%E5%85%B3%E7%B3%BB%E5%80%BC%E7%9A%84%E5%88%97%E8%A1%A8%E8%BD%AC%E4%B8%BA%E6%A0%91%E7%8A%B6%E5%B5%8C%E5%A5%97%E5%AD%97%E5%85%B8/</url>
    <content><![CDATA[<p>记录一道笔试题</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote>
<p>假设前端同学通过接口向后端传了天猫的行业信息，例如：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">industry_list</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">     <span class="string">"parent_ind"</span> : <span class="string">"女装"</span>,</span><br><span class="line">     <span class="string">"name"</span> : <span class="string">"连衣裙"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">     <span class="string">"name"</span>: <span class="string">"女装"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">     <span class="string">"parent_ind"</span> : <span class="string">"女装"</span>,</span><br><span class="line">     <span class="string">"name"</span> : <span class="string">"半身裙"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">     <span class="string">"parent_ind"</span> : <span class="string">"女装"</span>,</span><br><span class="line">     <span class="string">"name"</span> : <span class="string">"A字裙"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">     <span class="string">"name"</span>: <span class="string">"数码"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"parent_ind"</span> : <span class="string">"数码"</span>,</span><br><span class="line">     <span class="string">"name"</span>: <span class="string">"电脑配件"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"parent_ind"</span> : <span class="string">"电脑配件"</span>,</span><br><span class="line">     <span class="string">"name"</span>: <span class="string">"内存"</span></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>为了取用方便，我们希望可以将其转换为树状格式，例如：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"数码"</span>: &#123;</span><br><span class="line">    <span class="attr">"电脑配件"</span>: &#123;</span><br><span class="line">        <span class="attr">"内存"</span> : &#123;&#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"女装"</span> : &#123;</span><br><span class="line">     <span class="attr">"连衣裙"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"半身裙"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"A字裙"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现一个方法完成这个转换,时间复杂度请控制在O(n)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_format</span><span class="params">(data)</span>:</span></span><br><span class="line">       <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="考察的知识点"><a href="#考察的知识点" class="headerlink" title="考察的知识点"></a>考察的知识点</h2><pre><code>1.数据类型，Python里set的查找效率比list高
2.字典推导，更Pythonic的写法
3.对象引用，Python的赋值是给值贴上标签，而不是把值放入盒子</code></pre><img src="/images/assignment.png" title="流畅的Python 第八章" style="width: 70%">

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>先根据<code>industry_list</code>构建一个包含所有项的字典<code>data_dict</code>；</li>
<li>遍历<code>industry_list</code>并利用<strong>对象引用</strong>的特点自动更新<code>data_dict</code>的嵌套关系；</li>
<li>最后过滤掉那些只存在于嵌套之内的值；</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: shaoxyz</span></span><br><span class="line"><span class="string">@file: convert_format.py</span></span><br><span class="line"><span class="string">@time: 2020-07-20 11:09</span></span><br><span class="line"><span class="string">@desc:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line">industry_list = [</span><br><span class="line">    &#123;<span class="string">"parent_ind"</span>: <span class="string">"女装"</span>, <span class="string">"name"</span>: <span class="string">"连衣裙"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"女装"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"parent_ind"</span>: <span class="string">"女装"</span>, <span class="string">"name"</span>: <span class="string">"半身裙"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"parent_ind"</span>: <span class="string">"女装"</span>, <span class="string">"name"</span>: <span class="string">"A字裙"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"parent_ind"</span>: <span class="string">"数码"</span>, <span class="string">"name"</span>: <span class="string">"电脑配件"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"parent_ind"</span>: <span class="string">"电脑配件"</span>, <span class="string">"name"</span>: <span class="string">"内存"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"数码"</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">expect_output = &#123;</span><br><span class="line">    <span class="string">"数码"</span>: &#123;</span><br><span class="line">        <span class="string">"电脑配件"</span>: &#123;</span><br><span class="line">            <span class="string">"内存"</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"女装"</span>: &#123;</span><br><span class="line">        <span class="string">"连衣裙"</span>: &#123;&#125;, </span><br><span class="line">        <span class="string">"半身裙"</span>: &#123;&#125;, </span><br><span class="line">        <span class="string">"A字裙"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_format</span><span class="params">(data: List[dict])</span> -&gt; dict:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将包含父子关系值的列表 转换为 嵌套字典</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    data_dict = &#123;i.get(<span class="string">"name"</span>): &#123;&#125; <span class="keyword">for</span> i <span class="keyword">in</span> data&#125;</span><br><span class="line">    has_parent = set()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        parent_ind = i.get(<span class="string">"parent_ind"</span>)</span><br><span class="line">        name = i.get(<span class="string">"name"</span>)</span><br><span class="line">        <span class="keyword">if</span> parent_ind:</span><br><span class="line">            has_parent.add(name)</span><br><span class="line">        <span class="keyword">if</span> parent_ind <span class="keyword">in</span> data_dict:</span><br><span class="line">            data_dict[parent_ind][name] = data_dict[name]  <span class="comment"># KEY</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Filter</span></span><br><span class="line">    res = &#123;key: val <span class="keyword">for</span> key, val <span class="keyword">in</span> data_dict.items() <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> has_parent&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_convert_format</span><span class="params">()</span>:</span></span><br><span class="line">    res = convert_format(industry_list)</span><br><span class="line">    <span class="keyword">assert</span> res == expect_output</span><br><span class="line">    print(<span class="string">"well done"</span>)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>扶我起来，我还能再优化一下代码</title>
    <url>/2020/07/10/%E6%89%B6%E6%88%91%E8%B5%B7%E6%9D%A5%EF%BC%8C%E6%88%91%E8%BF%98%E8%83%BD%E5%86%8D%E4%BC%98%E5%8C%96%E4%B8%80%E4%B8%8B%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>面试官老王：给你出一道题吧，很简单，统计字符串中各个字符出现的次数</p>
<p>求职者小李：嗯，好的！</p>
<p>( 于是小李开始输出..</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counte...</span><br></pre></td></tr></table></figure>


<p>老王打断小李：emm.. 不，不要用Counter</p>
<p>小李被打断有点慌：啊好的</p>
<p>老王温馨提醒：就用字典吧</p>
<p>小李诧异心想：就这？</p>
<p>( 于是小李又开始输出..</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(s)</span>:</span></span><br><span class="line">    res = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">            res[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res[i] += <span class="number">1</span></span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>


<p>老王：嗯，好，那你分析一下复杂度吧</p>
<p>小李心想，这有什么好分析的，不就O(n)么？小李十分肯定答：O(N)!</p>
<p>老王：em..还有优化的空间吗？</p>
<p>小李又看了一眼代码，自己嘀咕：必须扫一遍所有字符，那O(N)还能怎么优化，面试官莫不是在搞我？</p>
<p>气氛有点尴尬，小李怎么也想不出来还能怎么优化.. </p>
<p>…<br>…<br>…</p>
<h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><blockquote>
<p><strong>还可以再减少一次对res的查询</strong></p>
</blockquote>
<p>先来分析分析最初的写法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(s)</span>:</span></span><br><span class="line">    res = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> res: <span class="comment"># 第一次查res</span></span><br><span class="line">            res[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res[i] += <span class="number">1</span> <span class="comment"># 等价于`res[i] = res[i] + 1` 第二次查res</span></span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>


<p>第一种写法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(s)</span>:</span></span><br><span class="line">    res = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        res[i] = res.get(i, <span class="number">0</span>) + <span class="number">1</span> <span class="comment"># 只查了一次res</span></span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>

<p>第二种写法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count2</span><span class="params">(s)</span>:</span></span><br><span class="line">    res = defaultdict(int)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        res[i] += <span class="number">1</span> <span class="comment"># 只查了一次res</span></span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现策略模式</title>
    <url>/2020/07/13/Python%E5%AE%9E%E7%8E%B0%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>这是最近求职碰到的一道真实笔试题，HR把题目发来后，完整的编码花了大半个下午，格式化输出实在是有点麻烦<br>话不多说，直接上题</p>
<h1 id="架构小操练"><a href="#架构小操练" class="headerlink" title="架构小操练"></a>架构小操练</h1><h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2><p>某快餐品牌推出了它独家的外卖应用，用户可以在手机上直接下单。该应用会根据用户选择的菜品(Item)、数量(Count)和优惠方式(Promotion)进行计算，告诉用户需要支付的金额(Charge)。</p>
<p>优惠活动有多种形式。假设用户一次只能使用一种优惠，那么使用哪种优惠省钱最多就会是一个让用户头疼的问题。所以该外卖应用为了方便用户，在用户下单时，会自动选择最优惠的方式并计算出最终金额让用户确认。</p>
<p>我们需要实现一个名为<code>bestCharge</code>的函数，它能够接收用户选择的菜品和数量（以特定格式呈现）作为输入，然后返回计算后的汇总信息。</p>
<p>已知：</p>
<ul>
<li>该店的菜品每一个都有一个唯一的id</li>
<li>当前的优惠方式有:<ul>
<li>满30减6元</li>
<li>指定菜品半价</li>
</ul>
</li>
<li>除菜品外没有其它收费（如送餐费、餐盒费等）</li>
<li>如果两种优惠方式省钱一样多，则使用前一种优惠方式</li>
</ul>
<h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[<span class="string">"ITEM0001 x 1"</span>, <span class="string">"ITEM0013 x 2"</span>, <span class="string">"ITEM0022 x 1"</span>]</span><br></pre></td></tr></table></figure>

<h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">============= 订餐明细 =============</span><br><span class="line">黄焖鸡 x 1 = 18元</span><br><span class="line">肉夹馍 x 2 = 12元</span><br><span class="line">凉皮 x 1 = 8元</span><br><span class="line">-----------------------------------</span><br><span class="line">使用优惠:</span><br><span class="line">指定菜品半价(黄焖鸡，凉皮)，省13元</span><br><span class="line">-----------------------------------</span><br><span class="line">总计：25元</span><br><span class="line">===================================</span><br></pre></td></tr></table></figure>

<h2 id="使用另一种优惠的样例"><a href="#使用另一种优惠的样例" class="headerlink" title="使用另一种优惠的样例"></a>使用另一种优惠的样例</h2><p>输入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[<span class="string">"ITEM0013 x 4"</span>, <span class="string">"ITEM0022 x 1"</span>]</span><br></pre></td></tr></table></figure>


<p>输出：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">============= 订餐明细 =============</span><br><span class="line">肉夹馍 x 4 = 24元</span><br><span class="line">凉皮 x 1 = 8元</span><br><span class="line">-----------------------------------</span><br><span class="line">使用优惠:</span><br><span class="line">满30减6元，省6元</span><br><span class="line">-----------------------------------</span><br><span class="line">总计：26元</span><br><span class="line">===================================</span><br></pre></td></tr></table></figure>

<h2 id="如果没有优惠可享受"><a href="#如果没有优惠可享受" class="headerlink" title="如果没有优惠可享受"></a>如果没有优惠可享受</h2><p>输入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[<span class="string">"ITEM0013 x 4"</span>]</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">============= 订餐明细 =============</span><br><span class="line">肉夹馍 x 4 = 24元</span><br><span class="line">-----------------------------------</span><br><span class="line">总计：24元</span><br><span class="line">===================================</span><br></pre></td></tr></table></figure>

<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><p>看到题就感觉似曾相识，参考流畅的Python第六章</p>
<img src="/images/strategy.png">

<p>好了，把朕的🐎牵上来！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@version: python3.7</span></span><br><span class="line"><span class="string">@author: shaoxyz</span></span><br><span class="line"><span class="string">@file: strategy.py</span></span><br><span class="line"><span class="string">@time: 2020-07-01 18:54</span></span><br><span class="line"><span class="string">@desc: 操练策略模式</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Dict</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">菜品属性说明</span></span><br><span class="line"><span class="string">item = &#123;</span></span><br><span class="line"><span class="string">    _id: &lt;INCR&gt;,        # 自增id</span></span><br><span class="line"><span class="string">    name: str,          # 菜品名</span></span><br><span class="line"><span class="string">    price: int,         # 单价，单位:分</span></span><br><span class="line"><span class="string">    is_half_price: bool # 是否半价</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"ITEM0001"</span>: &#123;<span class="string">"_id"</span>: <span class="number">1</span>, <span class="string">"name"</span>: <span class="string">"黄焖鸡"</span>, <span class="string">"price"</span>: <span class="number">1800</span>, <span class="string">"is_half_price"</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">    <span class="string">"ITEM0002"</span>: &#123;<span class="string">"_id"</span>: <span class="number">2</span>, <span class="string">"name"</span>: <span class="string">"蛋炒饭"</span>, <span class="string">"price"</span>: <span class="number">1500</span>, <span class="string">"is_half_price"</span>: <span class="literal">False</span>&#125;,</span><br><span class="line">    <span class="string">"ITEM0003"</span>: &#123;<span class="string">"_id"</span>: <span class="number">3</span>, <span class="string">"name"</span>: <span class="string">"牛肉面"</span>, <span class="string">"price"</span>: <span class="number">2200</span>, <span class="string">"is_half_price"</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">    <span class="string">"ITEM0004"</span>: &#123;<span class="string">"_id"</span>: <span class="number">4</span>, <span class="string">"name"</span>: <span class="string">"东北饺子"</span>, <span class="string">"price"</span>: <span class="number">1800</span>, <span class="string">"is_half_price"</span>: <span class="literal">False</span>&#125;,</span><br><span class="line">    <span class="string">"ITEM0013"</span>: &#123;<span class="string">"_id"</span>: <span class="number">13</span>, <span class="string">"name"</span>: <span class="string">"肉夹馍"</span>, <span class="string">"price"</span>: <span class="number">600</span>, <span class="string">"is_half_price"</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">    <span class="string">"ITEM0022"</span>: &#123;<span class="string">"_id"</span>: <span class="number">22</span>, <span class="string">"name"</span>: <span class="string">"凉皮"</span>, <span class="string">"price"</span>: <span class="number">800</span>, <span class="string">"is_half_price"</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">    <span class="string">"ITEM0023"</span>: &#123;</span><br><span class="line">        <span class="string">"_id"</span>: <span class="number">23</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"超级无敌海鲜霸王担担面之超级无敌海鲜霸王担担面"</span>,</span><br><span class="line">        <span class="string">"price"</span>: <span class="number">3000</span>,</span><br><span class="line">        <span class="string">"is_half_price"</span>: <span class="literal">True</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## Exception</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectDoesNotExist</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="string">"""The requested object does not exist"""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InvalidParams</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="string">"""Invalid parameters"""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmptyInput</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="string">"""Invalid parameters"""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Obj</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, item_id, count)</span>:</span></span><br><span class="line">        self.item_info = data.get(item_id)</span><br><span class="line">        <span class="keyword">if</span> self.item_info <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ObjectDoesNotExist(<span class="string">f"不存在菜品: <span class="subst">&#123;item_id&#125;</span>"</span>)</span><br><span class="line">        self.count = count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">price</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.item_info.get(<span class="string">"price"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> self.item_info.get(<span class="string">"name"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_half_price</span><span class="params">(self)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> self.item_info.get(<span class="string">"is_half_price"</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.price * self.count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span>:</span></span><br><span class="line">    _lock = threading.RLock()  <span class="comment"># 无论类有多少个实例，都用一个锁</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, promotion=None)</span>:</span></span><br><span class="line">        self.basket = []</span><br><span class="line">        self.promotion = promotion</span><br><span class="line">        self.half_price_items = set()</span><br><span class="line"></span><br><span class="line">        self._final_promotion = <span class="literal">None</span></span><br><span class="line">        self._discount = <span class="number">0</span></span><br><span class="line">        self._finished = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_to_basket</span><span class="params">(self, *items)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> Order._lock:</span><br><span class="line">            self._finished = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">                self.basket.append(item)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">final_promotion</span><span class="params">(self)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._finished:</span><br><span class="line">            self.charge()</span><br><span class="line">        <span class="keyword">return</span> self._final_promotion</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discount</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._finished:</span><br><span class="line">            self.charge()</span><br><span class="line">        <span class="keyword">return</span> self._discount</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.basket:</span><br><span class="line">            total += item.total</span><br><span class="line">        <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">charge</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.promotion:</span><br><span class="line">            discount = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">with</span> Order._lock:</span><br><span class="line">                discount = self.promotion.discount(self)</span><br><span class="line">                self._finished = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.total - discount</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Promotion</span></span><br><span class="line">PROMOS = set()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_to_promos</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="string">"""注册到优惠机制集合"""</span></span><br><span class="line"></span><br><span class="line">    PROMOS.add(func)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promotion</span><span class="params">(ABC)</span>:</span></span><br><span class="line">    <span class="string">"""优惠策略抽象基类"""</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discount</span><span class="params">(self, order)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@add_to_promos</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FullReductionPromo</span><span class="params">(Promotion)</span>:</span></span><br><span class="line">    <span class="string">"""满30减6元"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discount</span><span class="params">(self, order)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">600</span> <span class="keyword">if</span> order.total &gt; <span class="number">3000</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@add_to_promos</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HalfPricePromo</span><span class="params">(Promotion)</span>:</span></span><br><span class="line">    <span class="string">"""指定菜品半价"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discount</span><span class="params">(self, order)</span>:</span></span><br><span class="line">        discount = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> order.basket:</span><br><span class="line">            <span class="keyword">if</span> item.is_half_price:</span><br><span class="line">                order.half_price_items.add(item.name)</span><br><span class="line">                discount += item.total / <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> discount</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BestPromo</span><span class="params">(Promotion)</span>:</span></span><br><span class="line">    <span class="string">"""最佳优惠"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discount</span><span class="params">(self, order)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用装饰器注册代替</span></span><br><span class="line">        <span class="comment"># all_promotion = [</span></span><br><span class="line">        <span class="comment">#     globals()[name]</span></span><br><span class="line">        <span class="comment">#     for name in globals()</span></span><br><span class="line">        <span class="comment">#     if name.endswith("Promo") and name != "BestPromo"</span></span><br><span class="line">        <span class="comment"># ]</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> promo <span class="keyword">in</span> PROMOS:</span><br><span class="line">            discount = promo().discount(order)</span><br><span class="line">            <span class="keyword">if</span> discount != <span class="number">0</span> <span class="keyword">and</span> discount &gt; order._discount:</span><br><span class="line">                order._discount = discount</span><br><span class="line">                order._final_promotion = promo().__doc__</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> order._discount</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## utils</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_output</span><span class="params">(order)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    ============= 订餐明细 =============</span></span><br><span class="line"><span class="string">    黄焖鸡 x 1 = 18元</span></span><br><span class="line"><span class="string">    肉夹馍 x 2 = 12元</span></span><br><span class="line"><span class="string">    凉皮 x 1 = 8元</span></span><br><span class="line"><span class="string">    -----------------------------------</span></span><br><span class="line"><span class="string">    使用优惠:</span></span><br><span class="line"><span class="string">    指定菜品半价(黄焖鸡，凉皮)，省13元</span></span><br><span class="line"><span class="string">    -----------------------------------</span></span><br><span class="line"><span class="string">    总计：25元</span></span><br><span class="line"><span class="string">    ===================================</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    head = <span class="string">"============= 订餐明细 =============\n"</span></span><br><span class="line">    divide = <span class="string">"\n-----------------------------------\n"</span></span><br><span class="line">    bottom = <span class="string">"==================================="</span></span><br><span class="line"></span><br><span class="line">    items_output = <span class="string">"\n"</span>.join(</span><br><span class="line">        [</span><br><span class="line">            <span class="string">"\n"</span>.join(</span><br><span class="line">                textwrap.wrap(<span class="string">f"<span class="subst">&#123;i.name&#125;</span> x <span class="subst">&#123;i.count&#125;</span> = <span class="subst">&#123;Decimal(i.total / <span class="number">100</span>)&#125;</span>元"</span>, <span class="number">20</span>)</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> order.basket</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    output = head + items_output + divide</span><br><span class="line">    charge_output = <span class="string">f"总计：<span class="subst">&#123;Decimal(order.charge() / <span class="number">100</span>)&#125;</span>元\n"</span></span><br><span class="line"></span><br><span class="line">    best_promo = order.final_promotion</span><br><span class="line">    <span class="keyword">if</span> best_promo == <span class="string">"指定菜品半价"</span>:</span><br><span class="line">        lines = <span class="string">"\n"</span>.join(</span><br><span class="line">            textwrap.wrap(</span><br><span class="line">                <span class="string">f"<span class="subst">&#123;best_promo&#125;</span>(<span class="subst">&#123;<span class="string">','</span>.join(order.half_price_items)&#125;</span>), 省<span class="subst">&#123;Decimal(order.discount/<span class="number">100</span>)&#125;</span>元"</span>,</span><br><span class="line">                <span class="number">20</span>,</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        promotion_output = <span class="string">f"使用优惠: \n<span class="subst">&#123;lines&#125;</span>"</span></span><br><span class="line">        output += promotion_output + divide</span><br><span class="line">    <span class="keyword">elif</span> best_promo == <span class="string">"满30减6元"</span>:</span><br><span class="line">        promotion_output = <span class="string">f"使用优惠: \n<span class="subst">&#123;best_promo&#125;</span>, 省<span class="subst">&#123;Decimal(order.discount/<span class="number">100</span>)&#125;</span>元"</span></span><br><span class="line">        output += promotion_output + divide</span><br><span class="line"></span><br><span class="line">    output += charge_output + bottom</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify_input_format</span><span class="params">(input_item: str)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    pattern = re.compile(<span class="string">r"^ITEM\d+( x )&#123;1&#125;[1-9]+"</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> pattern.match(input_item):</span><br><span class="line">        <span class="keyword">raise</span> InvalidParams(<span class="string">"输入格式有误"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_input</span><span class="params">(input_items: list)</span> -&gt; Dict[str, int]:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> input_items:</span><br><span class="line">        <span class="keyword">raise</span> EmptyInput(<span class="string">"未挑选菜品"</span>)</span><br><span class="line"></span><br><span class="line">    items_map = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> input_items:</span><br><span class="line">        verify_input_format(i)</span><br><span class="line">        item_id, count = i.split(<span class="string">" x "</span>)</span><br><span class="line">        <span class="keyword">if</span> item_id <span class="keyword">in</span> items_map:</span><br><span class="line">            items_map[item_id] += int(count)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            items_map[item_id] = int(count)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> items_map</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## main</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bestCharge</span><span class="params">(input_items: list)</span> -&gt; str:</span></span><br><span class="line">    items_map = parse_input(input_items)</span><br><span class="line"></span><br><span class="line">    order = Order(promotion=BestPromo())</span><br><span class="line"></span><br><span class="line">    order.add_to_basket(</span><br><span class="line">        *[Item(item_id, items_map[item_id]) <span class="keyword">for</span> item_id <span class="keyword">in</span> items_map.keys()]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> format_output(order)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    input_demo3 = [<span class="string">"ITEM0001 x 1"</span>, <span class="string">"ITEM0001 x 1"</span>, <span class="string">"ITEM0013 x 4"</span>, <span class="string">"ITEM0013 x 4"</span>]</span><br><span class="line"></span><br><span class="line">    print(bestCharge(input_demo3))</span><br></pre></td></tr></table></figure>



<p>当时还写了单元测试一起给HR发过去，就不在这写了 : )</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
